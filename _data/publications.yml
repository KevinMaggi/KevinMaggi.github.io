# ENTRY EXAMPLE
#
# - key: NameYEARFirst_word
#   venue_type: workshop | conference | journal
#   pub_type: ( pre-proceeding | proceeding | post-proceeding ) | ( regular issue | special issue )
#   title: "Publication's title"
#   authors:
#     - Tizio
#     - Caio
#     - Sempronio
#   year: xxxx
#   venue:  
#     name: "Workshop's name" | "Conference's name" | "Journal's name"
#     acronym: ABC
#     year: xxxx
#     edition: xx  # in case of conference or workshop
#     issue: xxx  # in case of journal article
#     special: "Special issue's title"  # in case of special issue journal article
#     colocation:  # in case of workshop paper
#       name: "Co-location venue's name"
#       acronym: ABC
#       edition: xx
#   doi: xx.xxxx/xxxxxxx.xxxxxxx
#   manuscript:
#   repository:
#   rep_pkg:
#   slides:
#   abstract: >-
#   
#   bibtex: |-
#
#   extension_of: key
#   extended_by: key
#   awards:
#     - name: Best Paper Award
#       link:
#       alt: description
#   

- key: Maggi2025Evolution
  venue_type: journal
  pub_type: special issue
  title: "Evolution of Code Technical Debt in Microservices Architectures"
  authors:
    - K. Maggi
    - R. Verdecchia
    - L. Scommegna
    - E. Vicario
  year: 2025
  venue:  
    name: "Journal of Systems and Software"
    acronym: JSS
    year: 2025
    special: "Quality in Software Architecture"
  doi: 10.1016/j.jss.2024.112301
  manuscript: jss2024
  repository: 
  rep_pkg: https://doi.org/10.6084/m9.figshare.25922506
  slides:
  abstract: |-
    Context: Microservices are gaining significant traction in academic research and industry due to their advantages, and Technical Debt has long been a heavily researched metric in software quality context. However, to date, no study has attempted to understand how Code Tehnical Debt evolves in such architectures.
    
    Aim: This research aims to understand how Tehnical Debt evolves over time in microservice architectures by investigating its trends, patterns, and potential relations with microservices number.
    
    Method: We analyze the Technical Debt evolution of 13 open-source projects. We collect data from systems through automated source code analysis, statistically analyze results to identify Technical Debt trends and correlations with microservices number, and conduct a subsequent manual commit inspection.
    
    Results: Technical Debt increases over time, with periods of stability. The growth is related to microservices number, but its rate is not. The analysis revealed trend differences during initial development phases and later stages. Different activities can introduce Tehnical Debt, while its removal relies mainly on refactoring.
    
    Conclusions: Microservices independence is fundamental to maintain the technical debt under control, keeping it compartmentalized. The findings underscore the importance of Technical Debt management strategies to support the long-term success of microservices.
  bibtex: |-
    @article{Maggi2025Evolution,
      author    = {Kevin Maggi and Roberto Verdecchia and Leonardo Scommegna and Enrico Vicario},
      title     = {Evolution of code technical debt in microservices architectures},
      journal   = {Journal of Systems and Software},
      year      = {2025},
      editor    = {Elsevier},
      volume    = {222},
      pages     = {112301},
      issn      = {0164-1212},
      date      = {2025-04},
      doi       = {10.1016/j.jss.2024.112301},
      url       = {https://www.sciencedirect.com/science/article/pii/S0164121224003455},
      keywords  = {Microservice, Technical debt, Software evolution},
      language  = {english},
      note      = {Special Issue on Quality in Software Architecture}
    }
- key: Verdecchia2024Technical
  venue_type: conference
  pub_type: post-proceeding
  title: "Technical Debt in Microservices: A Mixed-Method Case Study"
  authors:
    - R. Verdecchia
    - K. Maggi
    - L. Scommegna
    - E. Vicario
  year: 2024
  venue:
    name: "European Conference on Software Architecture"
    acronym: ECSA
    year: 2023
    edition: 17
  doi: 10.1007/978-3-031-66326-0_14
  manuscript: ecsa2023
  rep_pkg: https://github.com/STLab-UniFI/QUALIFIER-2023-TD-microservices-rep-pkg
  abstract: |-
    Background: Despite the rising interest of both academia and industry in microservice-based architectures and technical debt, the landscape remains uncharted when it comes to exploring the technical debt evolution in software systems built on this architecture.

    Aims: This study aims to unravel how technical debt evolves in software-intensive systems that utilize microservice architecture, focusing on (i) the patterns of its evolution, and (ii) the correlation between technical debt and the number of microservices.

    Method: We employ a mixed-method case study on an application with 13 microservices, 977 commits, and 38k lines of code. Our approach combines repository mining, automated code analysis, and manual inspection. The findings are discussed with the lead developer in a semi-structured interview, followed by a reflexive thematic analysis.

    Results: Despite periods of no TD growth, TD generally increases over time. TD variations can occur irrespective of microservice count or commit activity. TD and microservice numbers are often correlated. Adding or removing a microservice impacts TD similarly, regardless of existing microservice count.

    Conclusions: Developers must be cautious about the potential technical debt they might introduce, irrespective of the development activity conducted or the number of microservices involved. Maintaining steady technical debt during prolonged pe riods of time is possible, but growth, particularly during innovative phases, may be unavoidable. While monitoring technical debt is the key to start managing it, technical debt code analysis tools must be used wisely, as their output always necessitates also a qualitative system understanding to gain the complete picture
  bibtex: |-
    @inproceedings{Verdecchia2024Technical,
      author     = {Verdecchia, Roberto and Maggi, Kevin and Scommegna, Leonardo and Vicario, Enrico},
      title      = {{Technical Debt in Microservices: A Mixed-Method Case Study}},
      booktitle  = {Software Architecture. ECSA 2023 Tracks, Workshops, and Doctoral Symposium},
      year       = {2024},
      editor     = {Tekinerdo{\u{g}}an, Bedir and Spalazzese, Romina and S{\"o}zer, Hasan and Bonfanti, Silvia and Weyns, Danny},
      publisher  = {Springer Nature Switzerland},
      address    = {Cham, Switzerland},
      isbn       = {978-3-031-66326-0},
      date       = {2024-07-30},
      doi        = {10.1007/978-3-031-66326-0_14},
      url        = {https://link.springer.com/chapter/10.1007/978-3-031-66326-0_14},
      pages      = {217--236},
      numpages   = {20},
      eventtitle = {ECSA 2023: 17th European Conference on Software Architecture},
      eventdate  = {2023-09-18/2023-09-22},
      venue      = {Istanbul, Turkey},
      series     = {Lecture Notes in Computer Science},
      keywords   = {Technical Debt, Microservices, Software Evolution},
      language   = {English},
      note       = {Revised and Extended Selected Paper from the QUALIFIER workshop (International Workshop on Quality in Software Architecture)}
    }
  extension_of: Verdecchia2023Tracing
- key: Pollini2024Learning
  venue_type: workshop
  pub_type: proceeding
  title: "Learning Programming without Teachers: An Ongoing Ethnographic Study at 42"
  authors:
    - N. Pollini
    - K. Maggi
    - R. Verdecchia
    - E. Vicario
  year: 2024
  venue:
    name: "Workshop on evaLuation and assEssment in softwARe eNgineers’ Education and tRaining" 
    acronym: LEARNER
    year: 2024
    edition: 2
    colocation:
      name: "International Conference on Evaluation and Assessment in Software Engineering"
      acronym: EASE
      edition: 28
  doi: 10.1145/3661167.3661275
  manuscript: learner2024
  slides: learner2024
  abstract: |-
    Context: With the ever-evolving software landscape, methods to train software programmers are continuously advancing and evolving. In this investigation, we study the case of 42, a programming school with over 50 campuses worldwide. 42’s pedagogical method blends elements of problem-based learning, peer pedagogy, community building, and gamification.
    
    Objectives: The goal of the research is twofold: On one hand, to gain a deep understanding of the pedagogical method itself, and on the other hand, to study how its different components affect learning.

    Method: We adopt an ethnographic qualitative inquiry, with two academic researchers conducting participant observation over a period of six months by using activity theory as theoretical underpinning.

    Results: Problems of incremental difficulty, albeit challenging, foster virtuous cycles of reinforcing feedback and community building. Gamification and peer learning elements, which are deeply rooted in the carefully crafted educational receipt, further support the pedagogical method.

    Conclusions: The characteristic nature of 42 positions it as an outlier compared to the recurrent academic setting of frontal lectures followed by a final exam, making it a valuable case study to understand how various pedagogical components may function, interact, and affect student learning.
  bibtex: |-
    @inproceedings{Pollini2023Learning,
      author     = {Pollini, Nicol\`{o} and Maggi, Kevin and Verdecchia, Roberto and Vicario, Enrico},
      title      = {{Learning Programming without Teachers: An Ongoing Ethnographic Study at 42}},
      booktitle  = {Proceedings of the 28th International Conference on Evaluation and Assessment in Software Engineering},
      year       = {2024},
      publisher  = {Association for Computing Machinery},
      address    = {New York, NY, United States},
      isbn       = {9798400717017},
      date       = {2024-06-18},
      doi        = {10.1145/3661167.3661275},
      url        = {https://dl.acm.org/doi/10.1145/3661167.3661275},
      pages      = {590-594},
      numpages   = {5},
      eventtitle = {EASE 2024: 28th International Conference on Evaluation and Assessment in Software Engineering},
      eventdate  = {2024-06-18/2024-06-21},
      venue      = {Salerno, Italy},
      series     = {EASE '24},
      keywords   = {Ethnography, Gamification, Peer Pedagogy, Problem-Based Learning, Software Education, Software Engineering},
      language   = {English},
      note       = {Presented at the LEARNER workshop (evaLuation and assEssment in softwARe eNgineers’ Education and tRaining)}
    }
- key: Maggi2024CLAIM
  venue_type: conference
  pub_type: proceeding
  title: "CLAIM: a Lightweight Approach to Identify Microservices in Dockerized Environments"
  authors:
    - K. Maggi
    - R. Verdecchia
    - L. Scommegna
    - E. Vicario
  year: 2024
  venue:
    name: "International Conference on Evaluation and Assessment in Software Engineering"
    acronym: EASE
    year: 2024
    edition: 28
  doi: 10.1145/3661167.3661206
  repository: "https://github.com/KevinMaggi/CLAIM_rep-pkg"
  rep_pkg: "doi.org/10.6084/m9.figshare.25379212"
  manuscript: ease2024
  slides: ease2024
  abstract: |-
    Background: Over the past decade, microservices have surged in popularity within software engineering. From a research viewpoint, mining studies are frequently employed to assess the evolution of diverse microservice properties. Despite the growing need, a validated static method to swiftly identify microservices seems to be currently missing in the literature.
    
    Aims: We present CLAIM, a lightweight static approach that analyzes configuration files to identify microservices in Dockerized environments, specifically designed with mining studies in mind.
    
    Method: To validate CLAIM, we conduct an empirical experiment comprising 20 repositories, 160 microservices, and 13k commits. A priori and manually defined ground truths are used to evaluate CLAIM's microservice identification effectiveness and efficiency.
    
    Results: CLAIM detects microservices with an accuracy of 82.0%, reports a median execution time of 61ms per commit, and requires in the worst case scenario 125.5s to analyze the history of a repository comprising 1509 commits. With respect to its closest competitor, CLAIM shines most in terms of false positive reduction (-40%).
    
    Conclusions: While not able to reconstruct a microservice archi- tecture in its entirety, CLAIM is an effective and efficient option to swiftly identify microservices in Dockerized environments, and seems especially fitted for software evolution mining studies
  bibtex: |-
    @inproceedings{Maggi2024CLAIM,
      author     = {Maggi, Kevin and Verdecchia, Roberto and Scommegna, Leonardo and Vicario, Enrico},
      title      = {{CLAIM: a Lightweight Approach to Identify Microservices in Dockerized Environments}},
      booktitle  = {Proceedings of the 28th International Conference on Evaluation and Assessment in Software Engineering},
      year       = {2024},
      publisher  = {Association for Computing Machinery},
      address    = {New York, NY, United States},
      isbn       = {9798400717017},
      date       = {2024-06-18},
      doi        = {10.1145/3661167.3661206},
      url        = {https://dl.acm.org/doi/10.1145/3661167.3661206},
      pages      = {357-362},
      numpages   = {6},
      eventtitle = {EASE 2024: 28th International Conference on Evaluation and Assessment in Software Engineering},
      eventdate  = {2024-06-18/2024-06-21},
      venue      = {Salerno, Italy},
      series     = {EASE '24},
      keywords   = {Docker, Microservices, Repository Mining, Static Analysis},
      language   = {English}
    }
- key: Verdecchia2023Tracing
  venue_type: conference
  pub_type: pre-proceeding
  title: "Tracing the Footsteps of Technical Debt in Microservices: A Preliminary Case Study"
  authors:
    - R. Verdecchia
    - K. Maggi
    - L. Scommegna
    - E. Vicario
  year: 2023
  venue:
    name: "International Workshop on Quality in Software Architecture"
    acronym: QUALIFIER
    year: 2023
    edition: 1
    colocation:
      name: "European Conference on Software Architecture"
      acronym: ECSA
      edition: 17
  doi: 
  manuscript: qualifier2023
  rep_pkg: https://github.com/STLab-UniFI/QUALIFIER-2023-TD-microservices-rep-pkg
  abstract: |-
    Background: Albeit the growing academic and industrial interest in microservice architectures and technical debt, to date no study aimed to investigate the evolution characteristics of technical debt in software-intensive systems based on such architecture.

    Aims: The goal of this study is to understand how technical debt evolves in microservice-based software-intensive systems, in terms of (i) evolution trends, and (ii) relation between technical debt and number of microservices.

    Method: We adopt a case study based on an application comprising 13 microservices, 977 commits, and 38k lines of code. The research method is based on repository mining and automated source code analysis complemented via manual code inspection.

    Results: While long periods of development without TD increase are observed, TD overall increases in time. TD variations can happen regardless of the number of microservices and development activity considered in a commit. TD and number of microservices are strongly correlated, albeit not always. Adding (or removing) a microservice has a similar impact on TD regardless of the number of microservices already present in a software-intensive system.

    Conclusions: Adherence to microservice architecture principles might keep technical debt compartmentalized within microservices and hence more manageable. Developers should pay keen attention to the technical debt they may introduce, regardless of the number of microservice they touch with a commit and the development activity they carry out. Keeping technical debt constant during the evolution of a microservice-based architecture is possible, but the growth of technical debt while a software-intensive systems becomes bigger and more complex might be inevitable.
  bibtex: |-
    @inproceedings{Verdecchia2023Tracing,
      author     = {Verdecchia, Roberto and Maggi, Kevin and Scommegna, Leonardo and Vicario, Enrico},
      title      = {{Tracing the Footsteps of Technical Debt in Microservices: A Preliminary Case Study}},
      booktitle  = {1st International Workshop on Quality in Software Architecture (QUALIFIER)},
      year       = {2023}
    }
  extended_by: Verdecchia2024Technical